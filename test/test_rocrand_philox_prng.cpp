// Copyright (c) 2017 Advanced Micro Devices, Inc. All rights reserved.
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#include <stdio.h>
#include <gtest/gtest.h>

#include <hip/hip_runtime.h>
#include <rocrand.h>

#include <rng/generator_type.hpp>
#include <rng/generators.hpp>

TEST(rocrand_philox_prng_tests, uniform_uint_test)
{
    const size_t size = 1313;
    unsigned int * data;
    hipMalloc(&data, sizeof(unsigned int) * size);

    rocrand_philox4x32_10 g;
    g.generate(data, size);
    hipDeviceSynchronize();

    unsigned int host_data[size];
    hipMemcpy(host_data, data, sizeof(unsigned int) * size, hipMemcpyDeviceToHost);
    hipDeviceSynchronize();
    for(size_t i = 0; i < size; i++)
    {
        const unsigned int max = UINT_MAX;
        EXPECT_GE(host_data[i], 0);
        EXPECT_LE(host_data[i], max);
    }
}

TEST(rocrand_philox_prng_tests, uniform_float_test)
{
    const size_t size = 1313;
    float * data;
    hipMalloc(&data, sizeof(float) * size);

    rocrand_philox4x32_10 g;
    g.generate(data, size);
    hipDeviceSynchronize();

    float host_data[size];
    hipMemcpy(host_data, data, sizeof(float) * size, hipMemcpyDeviceToHost);
    hipDeviceSynchronize();
    for(size_t i = 0; i < size; i++)
    {
        EXPECT_GT(host_data[i], 0.0f);
        EXPECT_LE(host_data[i], 1.0f);
    }
}

// Check if the numbers generated by first generate() call are different from
// the numbers generated by the 2nd call (same generator)
TEST(rocrand_philox_prng_tests, state_progress_test)
{
    // Device data
    const size_t size = 1025;
    unsigned int * data;
    hipMalloc(&data, sizeof(unsigned int) * size);

    // Generator
    rocrand_philox4x32_10 g0;

    // Generate using g0 and copy to host
    g0.generate(data, size);
    hipDeviceSynchronize();

    unsigned int host_data1[size];
    hipMemcpy(host_data1, data, sizeof(unsigned int) * size, hipMemcpyDeviceToHost);
    hipDeviceSynchronize();

    // Generate using g0 and copy to host
    g0.generate(data, size);
    hipDeviceSynchronize();

    unsigned int host_data2[size];
    hipMemcpy(host_data2, data, sizeof(unsigned int) * size, hipMemcpyDeviceToHost);
    hipDeviceSynchronize();

    size_t same = 0;
    for(size_t i = 0; i < size; i++)
    {
        if(host_data1[i] == host_data2[i]) same++;
    }
    // It may happen that numbers are the same, so we
    // just make sure that most of them are different.
    EXPECT_LT(same, static_cast<size_t>(0.01f * size));
}

// Checks if generators with the same seed and in the same state
// generate the same numbers
TEST(rocrand_philox_prng_tests, same_seed_test)
{
    const unsigned long long seed = 0xdeadbeefdeadbeefULL;

    // Device side data
    const size_t size = 1024;
    unsigned int * data;
    hipMalloc(&data, sizeof(unsigned int) * size);

    // Generators
    rocrand_philox4x32_10 g0, g1;
    // Set same seeds
    g0.set_seed(seed);
    g1.set_seed(seed);

    // Generate using g0 and copy to host
    g0.generate(data, size);
    hipDeviceSynchronize();

    unsigned int g0_host_data[size];
    hipMemcpy(g0_host_data, data, sizeof(unsigned int) * size, hipMemcpyDeviceToHost);
    hipDeviceSynchronize();

    // Generate using g1 and copy to host
    g1.generate(data, size);
    hipDeviceSynchronize();

    unsigned int g1_host_data[size];
    hipMemcpy(g1_host_data, data, sizeof(unsigned int) * size, hipMemcpyDeviceToHost);
    hipDeviceSynchronize();

    // Numbers generated using same generator with same
    // seed should be the same
    for(size_t i = 0; i < size; i++)
    {
        EXPECT_EQ(g0_host_data[i], g1_host_data[i]);
    }
}

// Checks if generators with the same seed and in the same state generate
// the same numbers
TEST(rocrand_philox_prng_tests, different_seed_test)
{
    const unsigned long long seed0 = 0xdeadbeefdeadbeefULL;
    const unsigned long long seed1 = 0xbeefdeadbeefdeadULL;

    // Device side data
    const size_t size = 1024;
    unsigned int * data;
    hipMalloc(&data, sizeof(unsigned int) * size);

    // Generators
    rocrand_philox4x32_10 g0, g1;
    // Set different seeds
    g0.set_seed(seed0);
    g1.set_seed(seed1);

    // Generate using g0 and copy to host
    g0.generate(data, size);
    hipDeviceSynchronize();

    unsigned int g0_host_data[size];
    hipMemcpy(g0_host_data, data, sizeof(unsigned int) * size, hipMemcpyDeviceToHost);
    hipDeviceSynchronize();

    // Generate using g1 and copy to host
    g1.generate(data, size);
    hipDeviceSynchronize();

    unsigned int g1_host_data[size];
    hipMemcpy(g1_host_data, data, sizeof(unsigned int) * size, hipMemcpyDeviceToHost);
    hipDeviceSynchronize();

    size_t same = 0;
    for(size_t i = 0; i < size; i++)
    {
        if(g1_host_data[i] == g0_host_data[i]) same++;
    }
    // It may happen that numbers are the same, so we
    // just make sure that most of them are different.
    EXPECT_LT(same, static_cast<size_t>(0.01f * size));
}

// Check if the philox state counter is caluclated correctly during
// random number generation.
TEST(rocrand_philox_prng_state_tests, state_counter_test)
{
    // Device data
    const size_t size = 1025;
    unsigned int * data;
    hipMalloc(&data, sizeof(unsigned int) * size);

    // Generator
    rocrand_philox4x32_10 g0;

    // Counter should be 0
    auto state = g0.get_state();
    EXPECT_EQ(state.counter.x, 0);
    EXPECT_EQ(state.counter.y, 0);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 0);

    // Generate
    g0.generate(data, size);
    state = g0.get_state();
    EXPECT_EQ(state.counter.x, ((size + 3) / 4));
    EXPECT_EQ(state.counter.y, 0);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 0);
    hipDeviceSynchronize();

    // Generate
    g0.generate(data, size);
    state = g0.get_state();

    EXPECT_EQ(state.counter.x, 2 * ((size + 3) / 4));
    EXPECT_EQ(state.counter.y, 0);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 0);
    hipDeviceSynchronize();

    // Reset counter
    g0.set_seed(1);
    state = g0.get_state();
    EXPECT_EQ(state.counter.x, 0);
    EXPECT_EQ(state.counter.y, 0);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 0);
}

///
/// rocrand_philox_prng_state_tests TEST GROUP
///

TEST(rocrand_philox_prng_state_tests, set_seed_test)
{
    rocrand_philox4_32_10_state state;
    EXPECT_EQ(state.counter.x, 0);
    EXPECT_EQ(state.counter.y, 0);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 0);

    state.discard(1);
    EXPECT_EQ(state.counter.x, 1);
    EXPECT_EQ(state.counter.y, 0);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 0);

    state.set_seed(3331);
    EXPECT_EQ(state.counter.x, 0);
    EXPECT_EQ(state.counter.y, 0);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 0);
}

// Check if the philox state counter is caluclated correctly during
// random number generation.
TEST(rocrand_philox_prng_state_tests, discard_test)
{
    rocrand_philox4_32_10_state state;

    state.discard(UINT_MAX);
    EXPECT_EQ(state.counter.x, UINT_MAX);
    EXPECT_EQ(state.counter.y, 0);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 0);

    state.discard(UINT_MAX);
    EXPECT_EQ(state.counter.x, UINT_MAX - 1);
    EXPECT_EQ(state.counter.y, 1);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 0);

    state.discard(2);
    EXPECT_EQ(state.counter.x, 0);
    EXPECT_EQ(state.counter.y, 2);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 0);

    state.counter.x = UINT_MAX;
    state.counter.y = UINT_MAX;
    state.counter.z = UINT_MAX;
    state.discard(1);
    EXPECT_EQ(state.counter.x, 0);
    EXPECT_EQ(state.counter.y, 0);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 1);

    state.counter.x = UINT_MAX;
    state.counter.y = UINT_MAX;
    state.counter.z = UINT_MAX;
    state.discard();
    EXPECT_EQ(state.counter.x, 0);
    EXPECT_EQ(state.counter.y, 0);
    EXPECT_EQ(state.counter.z, 0);
    EXPECT_EQ(state.counter.w, 2);
}
